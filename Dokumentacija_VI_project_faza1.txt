-- Rad sa aplikacijom --
Pri pokretanju možete odigravati poteze i videti kako se "gumice" iscrtavaju i lako se proverava validnost poteza na ovaj način.
Takodje, prikazace se proizvoljno stanje koje se moze iskljuciti komentarisanjem f-je arbitrary_state.

1. start_game
Ova funkcija je odgovorna za pokretanje i upravljanje celokupnom igrom.

Unos veličine table: Korisnik unosi veličinu table (između 4 i 8). Funkcija proverava da li je unos validan, 
tj. da li je broj u tom opsegu.

Unos ko igra prvi: Korisnik bira da li će prvi igrati "X" ili "O". Unos se proverava da bude validan.

Inicijalizacija stanja igre: Funkcija poziva initial_state kako bi inicijalizovala tablu i druge varijable 
kao što su moves (potezi), i occupied_triangles (zauzeti trouglovi).

Glavna petlja igre: Igra ulazi u glavnu petlju, gde:

Uzimaju se korisnički unosi za poteze (u formatu: red kolona pravac).
Unos se validira pomoću funkcije validateMove().
Ažurira se stanje igre (potezi i linkovi), i tabla se ponovo crta.
Proverava se da li je igra gotova pozivom funkcije end_check(). Ako je igra završena, koristi se end_game_screen() 
da prikaže konačni rezultat i izlazi iz petlje.

2. end_game_screen
Ova funkcija se poziva kada igra završi, i prikazuje rezultate.

Brojanje X i O: Funkcija broji koliko puta se pojavljuju 'X' i 'O' u listi occupied_triangles, 
koja predstavlja zauzete trouglove na tabli.

Određivanje pobednika:

Ako 'X' ima više zauzetih trouglova, proglašava ga za pobednika i ispisuje rezultat.
Ako 'O' ima više zauzetih trouglova, proglašava ga za pobednika i ispisuje rezultat.
Ako su oba igrača na istom broju, proglašava se nerešeno.

3. links_for_move
Ova funkcija generiše listu tuple-ova koje predstavljaju tacke koje su sada povezane na osnovu poteza.

Ulazni parametri:

letter: Slovo reda (npr. 'A').
number: Broj kolone.
direction: Pravac poteza (može biti "D", "DD" ili "DL").
size: Veličina table.
Izlaz: Lista tuple-ova koji predstavljaju linkove između pozicija na osnovu pravca poteza


4. end_check

Funkcija prvo proverava da li je broj zauzetih trouglova dostigao maksimalni broj za određenu veličinu table (6 * veličina²).
Zatim, proverava da li je broj zauzetih trouglova za 'X' ili 'O' prešao maksimalnu dozvoljenu vrednost (3 * veličina²).
Ako je bilo koji od ovih uslova ispunjen, igra se završava.


5. makeBoard
Ova funkcija pravi početnu tabelu na osnovu unete veličine.

Ulazni parametar:

size: Veličina table koju korisnik unese.
Izlaz: Funkcija generiše tablu u obliku liste listi (matrica), gde je svaka lista jedan red na tabli.

Ako je veličina od 4 do 8, generiše se odgovarajući broj redova i kolona.
Ako je veličina van ovog opsega, funkcija ispisuje poruku o grešci.

-- Funkcije za iscrtavanje table --

Crtanje krece kroz printBoard funkciju. Potezi D (desno) crtaju se kroz printDMoves, a DL i DD f-jom printDLAndDDMovesAndUpdateMoveList.

printDMoves - prenose se potezi za red, broj tacaka u redu, red, i shift za taj red (za poravnjanje tj. broj tabova = 4 blanko znaka) i svaka tacka se poravnjava
sa beg + shift * tab + dot * 2 * tab, a i sami potezi krecu od tacke za koju su definisani.
Svaki potez ima dodatatni (cetvrti) parametar, koji je na pocetku 3 (jer je gumica duzine 3 - tj. povezuje 4 tacke) i dekrementira se svakom iteracijom.
Drugi parametar u potezu je kolona od koje krece iscrtavanje koji se takodje menja kroz ovu fju tako sto se inkrementira kroz iteracije.
Npr. potez nakon prve iteracije postaje:(b 1 d 3) --> (b 2 d 2). Ukoliko postoji i potez (b 1 d 3), nakon prve iteracije treba ukoloniti potez (b 2 d 2) jer je kraci,
iako se gumice preklapaju donekle, iscrtace se samo duza. Za ovo uklanjanje poteza sluzi fja deleteDuplicates.

printDLAndDDMovesAndUpdateMoveList - funkcionise slicno kao prethodna funkcija, malo slozenija ali slican princip. Dodatni parametri su:
centar (indeks sredisnjeg (najduzeg) niza table) i zauzeti trouglovi koje treba iscrtati.
Kada se crtaju ovi potezi za odredjeni red, npr: nakon prvog reda tacaka idu potezi za taj red tj. potezi koji krecu od reda A.
U zavisnosti gde smo pozicionirani od centralnog reda nakon icrtavanja poteza, npr. ako je u pitanju potez DD:

				if row < center:
					dd_dl_moves[index] = [chr(row + 1 + 65), move[1] + 1, move[2], move[3]]
				else:
					dd_dl_moves[index] = [chr(row + 1 + 65), move[1], move[2], move[3]]

                prenosi se potez i za sledeci red (B), i ako smo iznad centra krecemo od kolone -> kolona_za_a + 1.
                Slicno vazi i za poteze DL.
                Parametar move[3] se dekrementira i onda se brisu "visak potezi" isto kao i kod printDMoves, samo funkcijomfilter_moves_with_max_x3.

Takodje, potezi su sortirani u fji printBoard po koloni od koje krecu i sekundarni sort DD pa DL da bi se lepo iscrtali.
 -> dd_dl_for_row.sort(key=lambda x: (x[1], 0 if x[2].upper() == "DL" else 1))
Konacno, ako ispod neke tacke postoji x ili o, iscrtace se - ovo je objasnjeno kroz komentare u arbitrary_state funkciji.
Nakon zavrsetka f-je vraca se novogenerisani niz poteza koji ce sada sadrzati poteze za sledeci red jer ih treba nastaviti (3 gumice, 4 tacke).
Nadam se da je kolko-tolko citljivo ovo objasnjenje :D.



